// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/pivotal-cf/cf-redis-broker/redis"
)

type FakeLocalRepository struct {
	FindByIDStub        func(instanceID string) (*redis.Instance, error)
	findByIDMutex       sync.RWMutex
	findByIDArgsForCall []struct {
		instanceID string
	}
	findByIDReturns struct {
		result1 *redis.Instance
		result2 error
	}
	InstanceExistsStub        func(instanceID string) (bool, error)
	instanceExistsMutex       sync.RWMutex
	instanceExistsArgsForCall []struct {
		instanceID string
	}
	instanceExistsReturns struct {
		result1 bool
		result2 error
	}
	SetupStub        func(instance *redis.Instance) error
	setupMutex       sync.RWMutex
	setupArgsForCall []struct {
		instance *redis.Instance
	}
	setupReturns struct {
		result1 error
	}
	DeleteStub        func(instanceID string) error
	deleteMutex       sync.RWMutex
	deleteArgsForCall []struct {
		instanceID string
	}
	deleteReturns struct {
		result1 error
	}
	InstanceDataDirStub        func(instanceID string) string
	instanceDataDirMutex       sync.RWMutex
	instanceDataDirArgsForCall []struct {
		instanceID string
	}
	instanceDataDirReturns struct {
		result1 string
	}
	InstanceConfigPathStub        func(instanceID string) string
	instanceConfigPathMutex       sync.RWMutex
	instanceConfigPathArgsForCall []struct {
		instanceID string
	}
	instanceConfigPathReturns struct {
		result1 string
	}
	InstanceLogFilePathStub        func(instanceID string) string
	instanceLogFilePathMutex       sync.RWMutex
	instanceLogFilePathArgsForCall []struct {
		instanceID string
	}
	instanceLogFilePathReturns struct {
		result1 string
	}
	InstancePidFilePathStub        func(instanceID string) string
	instancePidFilePathMutex       sync.RWMutex
	instancePidFilePathArgsForCall []struct {
		instanceID string
	}
	instancePidFilePathReturns struct {
		result1 string
	}
	InstanceCountStub        func() (int, []error)
	instanceCountMutex       sync.RWMutex
	instanceCountArgsForCall []struct{}
	instanceCountReturns     struct {
		result1 int
		result2 []error
	}
	LockStub        func(instance *redis.Instance) error
	lockMutex       sync.RWMutex
	lockArgsForCall []struct {
		instance *redis.Instance
	}
	lockReturns struct {
		result1 error
	}
	UnlockStub        func(instance *redis.Instance) error
	unlockMutex       sync.RWMutex
	unlockArgsForCall []struct {
		instance *redis.Instance
	}
	unlockReturns struct {
		result1 error
	}
}

func (fake *FakeLocalRepository) FindByID(instanceID string) (*redis.Instance, error) {
	fake.findByIDMutex.Lock()
	fake.findByIDArgsForCall = append(fake.findByIDArgsForCall, struct {
		instanceID string
	}{instanceID})
	fake.findByIDMutex.Unlock()
	if fake.FindByIDStub != nil {
		return fake.FindByIDStub(instanceID)
	} else {
		return fake.findByIDReturns.result1, fake.findByIDReturns.result2
	}
}

func (fake *FakeLocalRepository) FindByIDCallCount() int {
	fake.findByIDMutex.RLock()
	defer fake.findByIDMutex.RUnlock()
	return len(fake.findByIDArgsForCall)
}

func (fake *FakeLocalRepository) FindByIDArgsForCall(i int) string {
	fake.findByIDMutex.RLock()
	defer fake.findByIDMutex.RUnlock()
	return fake.findByIDArgsForCall[i].instanceID
}

func (fake *FakeLocalRepository) FindByIDReturns(result1 *redis.Instance, result2 error) {
	fake.FindByIDStub = nil
	fake.findByIDReturns = struct {
		result1 *redis.Instance
		result2 error
	}{result1, result2}
}

func (fake *FakeLocalRepository) InstanceExists(instanceID string) (bool, error) {
	fake.instanceExistsMutex.Lock()
	fake.instanceExistsArgsForCall = append(fake.instanceExistsArgsForCall, struct {
		instanceID string
	}{instanceID})
	fake.instanceExistsMutex.Unlock()
	if fake.InstanceExistsStub != nil {
		return fake.InstanceExistsStub(instanceID)
	} else {
		return fake.instanceExistsReturns.result1, fake.instanceExistsReturns.result2
	}
}

func (fake *FakeLocalRepository) InstanceExistsCallCount() int {
	fake.instanceExistsMutex.RLock()
	defer fake.instanceExistsMutex.RUnlock()
	return len(fake.instanceExistsArgsForCall)
}

func (fake *FakeLocalRepository) InstanceExistsArgsForCall(i int) string {
	fake.instanceExistsMutex.RLock()
	defer fake.instanceExistsMutex.RUnlock()
	return fake.instanceExistsArgsForCall[i].instanceID
}

func (fake *FakeLocalRepository) InstanceExistsReturns(result1 bool, result2 error) {
	fake.InstanceExistsStub = nil
	fake.instanceExistsReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeLocalRepository) Setup(instance *redis.Instance) error {
	fake.setupMutex.Lock()
	fake.setupArgsForCall = append(fake.setupArgsForCall, struct {
		instance *redis.Instance
	}{instance})
	fake.setupMutex.Unlock()
	if fake.SetupStub != nil {
		return fake.SetupStub(instance)
	} else {
		return fake.setupReturns.result1
	}
}

func (fake *FakeLocalRepository) SetupCallCount() int {
	fake.setupMutex.RLock()
	defer fake.setupMutex.RUnlock()
	return len(fake.setupArgsForCall)
}

func (fake *FakeLocalRepository) SetupArgsForCall(i int) *redis.Instance {
	fake.setupMutex.RLock()
	defer fake.setupMutex.RUnlock()
	return fake.setupArgsForCall[i].instance
}

func (fake *FakeLocalRepository) SetupReturns(result1 error) {
	fake.SetupStub = nil
	fake.setupReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeLocalRepository) Delete(instanceID string) error {
	fake.deleteMutex.Lock()
	fake.deleteArgsForCall = append(fake.deleteArgsForCall, struct {
		instanceID string
	}{instanceID})
	fake.deleteMutex.Unlock()
	if fake.DeleteStub != nil {
		return fake.DeleteStub(instanceID)
	} else {
		return fake.deleteReturns.result1
	}
}

func (fake *FakeLocalRepository) DeleteCallCount() int {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	return len(fake.deleteArgsForCall)
}

func (fake *FakeLocalRepository) DeleteArgsForCall(i int) string {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	return fake.deleteArgsForCall[i].instanceID
}

func (fake *FakeLocalRepository) DeleteReturns(result1 error) {
	fake.DeleteStub = nil
	fake.deleteReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeLocalRepository) InstanceDataDir(instanceID string) string {
	fake.instanceDataDirMutex.Lock()
	fake.instanceDataDirArgsForCall = append(fake.instanceDataDirArgsForCall, struct {
		instanceID string
	}{instanceID})
	fake.instanceDataDirMutex.Unlock()
	if fake.InstanceDataDirStub != nil {
		return fake.InstanceDataDirStub(instanceID)
	} else {
		return fake.instanceDataDirReturns.result1
	}
}

func (fake *FakeLocalRepository) InstanceDataDirCallCount() int {
	fake.instanceDataDirMutex.RLock()
	defer fake.instanceDataDirMutex.RUnlock()
	return len(fake.instanceDataDirArgsForCall)
}

func (fake *FakeLocalRepository) InstanceDataDirArgsForCall(i int) string {
	fake.instanceDataDirMutex.RLock()
	defer fake.instanceDataDirMutex.RUnlock()
	return fake.instanceDataDirArgsForCall[i].instanceID
}

func (fake *FakeLocalRepository) InstanceDataDirReturns(result1 string) {
	fake.InstanceDataDirStub = nil
	fake.instanceDataDirReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeLocalRepository) InstanceConfigPath(instanceID string) string {
	fake.instanceConfigPathMutex.Lock()
	fake.instanceConfigPathArgsForCall = append(fake.instanceConfigPathArgsForCall, struct {
		instanceID string
	}{instanceID})
	fake.instanceConfigPathMutex.Unlock()
	if fake.InstanceConfigPathStub != nil {
		return fake.InstanceConfigPathStub(instanceID)
	} else {
		return fake.instanceConfigPathReturns.result1
	}
}

func (fake *FakeLocalRepository) InstanceConfigPathCallCount() int {
	fake.instanceConfigPathMutex.RLock()
	defer fake.instanceConfigPathMutex.RUnlock()
	return len(fake.instanceConfigPathArgsForCall)
}

func (fake *FakeLocalRepository) InstanceConfigPathArgsForCall(i int) string {
	fake.instanceConfigPathMutex.RLock()
	defer fake.instanceConfigPathMutex.RUnlock()
	return fake.instanceConfigPathArgsForCall[i].instanceID
}

func (fake *FakeLocalRepository) InstanceConfigPathReturns(result1 string) {
	fake.InstanceConfigPathStub = nil
	fake.instanceConfigPathReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeLocalRepository) InstanceLogFilePath(instanceID string) string {
	fake.instanceLogFilePathMutex.Lock()
	fake.instanceLogFilePathArgsForCall = append(fake.instanceLogFilePathArgsForCall, struct {
		instanceID string
	}{instanceID})
	fake.instanceLogFilePathMutex.Unlock()
	if fake.InstanceLogFilePathStub != nil {
		return fake.InstanceLogFilePathStub(instanceID)
	} else {
		return fake.instanceLogFilePathReturns.result1
	}
}

func (fake *FakeLocalRepository) InstanceLogFilePathCallCount() int {
	fake.instanceLogFilePathMutex.RLock()
	defer fake.instanceLogFilePathMutex.RUnlock()
	return len(fake.instanceLogFilePathArgsForCall)
}

func (fake *FakeLocalRepository) InstanceLogFilePathArgsForCall(i int) string {
	fake.instanceLogFilePathMutex.RLock()
	defer fake.instanceLogFilePathMutex.RUnlock()
	return fake.instanceLogFilePathArgsForCall[i].instanceID
}

func (fake *FakeLocalRepository) InstanceLogFilePathReturns(result1 string) {
	fake.InstanceLogFilePathStub = nil
	fake.instanceLogFilePathReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeLocalRepository) InstancePidFilePath(instanceID string) string {
	fake.instancePidFilePathMutex.Lock()
	fake.instancePidFilePathArgsForCall = append(fake.instancePidFilePathArgsForCall, struct {
		instanceID string
	}{instanceID})
	fake.instancePidFilePathMutex.Unlock()
	if fake.InstancePidFilePathStub != nil {
		return fake.InstancePidFilePathStub(instanceID)
	} else {
		return fake.instancePidFilePathReturns.result1
	}
}

func (fake *FakeLocalRepository) InstancePidFilePathCallCount() int {
	fake.instancePidFilePathMutex.RLock()
	defer fake.instancePidFilePathMutex.RUnlock()
	return len(fake.instancePidFilePathArgsForCall)
}

func (fake *FakeLocalRepository) InstancePidFilePathArgsForCall(i int) string {
	fake.instancePidFilePathMutex.RLock()
	defer fake.instancePidFilePathMutex.RUnlock()
	return fake.instancePidFilePathArgsForCall[i].instanceID
}

func (fake *FakeLocalRepository) InstancePidFilePathReturns(result1 string) {
	fake.InstancePidFilePathStub = nil
	fake.instancePidFilePathReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeLocalRepository) InstanceCount() (int, []error) {
	fake.instanceCountMutex.Lock()
	fake.instanceCountArgsForCall = append(fake.instanceCountArgsForCall, struct{}{})
	fake.instanceCountMutex.Unlock()
	if fake.InstanceCountStub != nil {
		return fake.InstanceCountStub()
	} else {
		return fake.instanceCountReturns.result1, fake.instanceCountReturns.result2
	}
}

func (fake *FakeLocalRepository) InstanceCountCallCount() int {
	fake.instanceCountMutex.RLock()
	defer fake.instanceCountMutex.RUnlock()
	return len(fake.instanceCountArgsForCall)
}

func (fake *FakeLocalRepository) InstanceCountReturns(result1 int, result2 []error) {
	fake.InstanceCountStub = nil
	fake.instanceCountReturns = struct {
		result1 int
		result2 []error
	}{result1, result2}
}

func (fake *FakeLocalRepository) Lock(instance *redis.Instance) error {
	fake.lockMutex.Lock()
	fake.lockArgsForCall = append(fake.lockArgsForCall, struct {
		instance *redis.Instance
	}{instance})
	fake.lockMutex.Unlock()
	if fake.LockStub != nil {
		return fake.LockStub(instance)
	} else {
		return fake.lockReturns.result1
	}
}

func (fake *FakeLocalRepository) LockCallCount() int {
	fake.lockMutex.RLock()
	defer fake.lockMutex.RUnlock()
	return len(fake.lockArgsForCall)
}

func (fake *FakeLocalRepository) LockArgsForCall(i int) *redis.Instance {
	fake.lockMutex.RLock()
	defer fake.lockMutex.RUnlock()
	return fake.lockArgsForCall[i].instance
}

func (fake *FakeLocalRepository) LockReturns(result1 error) {
	fake.LockStub = nil
	fake.lockReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeLocalRepository) Unlock(instance *redis.Instance) error {
	fake.unlockMutex.Lock()
	fake.unlockArgsForCall = append(fake.unlockArgsForCall, struct {
		instance *redis.Instance
	}{instance})
	fake.unlockMutex.Unlock()
	if fake.UnlockStub != nil {
		return fake.UnlockStub(instance)
	} else {
		return fake.unlockReturns.result1
	}
}

func (fake *FakeLocalRepository) UnlockCallCount() int {
	fake.unlockMutex.RLock()
	defer fake.unlockMutex.RUnlock()
	return len(fake.unlockArgsForCall)
}

func (fake *FakeLocalRepository) UnlockArgsForCall(i int) *redis.Instance {
	fake.unlockMutex.RLock()
	defer fake.unlockMutex.RUnlock()
	return fake.unlockArgsForCall[i].instance
}

func (fake *FakeLocalRepository) UnlockReturns(result1 error) {
	fake.UnlockStub = nil
	fake.unlockReturns = struct {
		result1 error
	}{result1}
}

var _ redis.LocalInstanceRepository = new(FakeLocalRepository)
